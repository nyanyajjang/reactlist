{"version":3,"sources":["components/multiply.jsx","components/WordRelay.jsx","serviceWorker.js","index.js"],"names":["React","require","useState","useRef","module","exports","Math","ceil","random","first","setFirst","second","setSecond","value","setValue","result","setResult","inputRef","onSubmit","e","preventDefault","parseInt","prevResult","current","focus","ref","onChange","target","id","WordRelay","state","word","onSubmitForm","length","setState","input","onChangeInput","currentTarget","onRefInput","c","this","Component","Boolean","window","location","hostname","match","MultiPly","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAAMA,EAAQC,EAAQ,GACdC,EAAqBF,EAArBE,SAAUC,EAAWH,EAAXG,OA6ClBC,EAAOC,QA3CU,WAAO,IAAD,EACOH,EAASI,KAAKC,KAAqB,EAAhBD,KAAKE,WAD/B,mBACZC,EADY,KACLC,EADK,OAESR,EAASI,KAAKC,KAAqB,EAAhBD,KAAKE,WAFjC,mBAEZG,EAFY,KAEJC,EAFI,OAGOV,EAAS,IAHhB,mBAGZW,EAHY,KAGLC,EAHK,OAISZ,EAAS,IAJlB,mBAIZa,EAJY,KAIJC,EAJI,KAKbC,EAAWd,EAAO,MAyBxB,OACI,gCACJ,0CAAkBM,EAAlB,MAA4BE,EAA5B,MACA,wBAAMO,SAtBe,SAACC,GAClBA,EAAEC,iBAEEC,SAASR,KAAWJ,EAAQE,GAC5BK,GAAU,SAACM,GACP,MAAO,WAAaT,KAGjBH,EAASJ,KAAKC,KAAmB,EAAdD,KAAKE,WACxBI,EAAUN,KAAKC,KAAmB,EAAdD,KAAKE,WACzBM,EAAS,MAGRE,EAAU,SACVF,EAAS,KAEdG,EAASM,QAAQC,UAOxB,yBAAOC,IAAKR,EAAUS,SA3BJ,SAACP,GACnBL,EAASK,EAAEQ,OAAOd,QA0B6BA,MAAOA,IACtD,uCAEJ,uBAAKe,GAAG,UAAUb,M,oGCxChBf,EAAQC,EAAQ,GAGhB4B,E,4MACFC,MAAQ,CACJC,KAAM,QACNlB,MAAO,GACPE,OAAQ,I,EAGZiB,aAAe,SAACb,GACZA,EAAEC,iBACE,EAAKU,MAAMC,KAAK,EAAKD,MAAMC,KAAKE,OAAS,KAAO,EAAKH,MAAMjB,MAAM,GACjE,EAAKqB,SAAU,CACXnB,OAAQ,QACRgB,KAAM,EAAKD,MAAMjB,MACjBA,MAAM,KAGV,EAAKqB,SAAS,CACVnB,OAAQ,QACRF,MAAO,KAEb,EAAKsB,MAAMX,S,EAKjBY,cAAgB,SAACjB,GACb,EAAKe,SAAS,CAACrB,MAAOM,EAAEkB,cAAcxB,S,EAK1CyB,WAAa,SAACC,GACV,EAAKJ,MAAQI,G,uDAIb,OAAO,gCACR,4CAAoBC,KAAKV,MAAMC,MAC/B,wBAAMb,SAAUsB,KAAKR,cACpB,yBAAOP,IAAKe,KAAKF,WAAYzB,MAAO2B,KAAKV,MAAMjB,MAAOa,SAAUc,KAAKJ,gBACrE,wCAGD,2BAAMI,KAAKV,MAAMf,a,GA7CFf,EAAdyC,WAkDRrC,EAAOC,QAAUwB,G,kGCvCGa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAW9C,EAAQ,IACnB4B,EAAY5B,EAAQ,IAE1B+C,IAASC,OAAO,6BAAK,kBAACF,EAAD,MAAY,kBAAClB,EAAD,OAAqBqB,SAASC,cAAc,UDyHvE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c41d32ae.chunk.js","sourcesContent":["const React = require('react');\nconst { useState, useRef } = React;\n\nconst MultiPly = () => {\n    const [first, setFirst] = useState(Math.ceil(Math.random() * 9));\n    const [second, setSecond] = useState(Math.ceil(Math.random() * 9));\n    const [value, setValue] = useState('');\n    const [result, setResult] = useState('');\n    const inputRef = useRef(null);\n    \n    const onChangeInput = (e) => {\n        setValue(e.target.value);\n    }\n\n    const onSubmitForm = (e) => {\n        e.preventDefault();\n\n        if (parseInt(value) === first * second) {\n            setResult((prevResult) => {\n                return 'Answer :' + value\n            })\n        \n                   setFirst(Math.ceil(Math.random()*9));\n                   setSecond(Math.ceil(Math.random()*9));\n                   setValue('');\n                   \n                } else {\n                    setResult('wrong');\n                    setValue('');\n                }\n               inputRef.current.focus();\n            };\n   \n    return (\n        <>\n    <div> MULTIPLY ! {first} x {second}? </div>\n    <form onSubmit={onSubmitForm}>\n        <input ref={inputRef} onChange={onChangeInput} value={value} />\n        <button> Go </button>\n    </form>\n    <div id=\"result\">{result}</div>\n    </>\n    );\n\n}\n\nmodule.exports = MultiPly;","const React = require('react');\nconst { Component } = React;\n\nclass WordRelay extends Component {\n    state = {\n        word: 'color',\n        value: '',\n        result: ''\n    };\n\n    onSubmitForm = (e) => {\n        e.preventDefault();\n        if (this.state.word[this.state.word.length - 1] === this.state.value[0]) {\n            this.setState ({\n                result: 'great',\n                word: this.state.value,\n                value:''\n            })\n        }else {\n            this.setState({\n                result: 'wrong',\n                value: ''\n            })\n        } this.input.focus();\n    }\n\n    \n\n    onChangeInput = (e) => {\n        this.setState({value: e.currentTarget.value})\n    }\n\n    input;\n\n    onRefInput = (c) => {\n        this.input = c;\n    }\n\n    render() {\n        return <>\n       <div>WORDS RELAY ! {this.state.word}</div>\n       <form onSubmit={this.onSubmitForm}>\n        <input ref={this.onRefInput} value={this.state.value} onChange={this.onChangeInput} />\n        <button>Play!</button>\n\n       </form>\n       <div>{this.state.result}</div>\n        </>\n    }\n}\n//instead of value={this.state.value} onChangeInput={this.onChangeInput} , defaultValue is possible.\nmodule.exports = WordRelay;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst MultiPly = require('./components/multiply');\nconst WordRelay = require('./components/WordRelay');\n\nReactDOM.render(<div><MultiPly /><WordRelay /></div>, document.querySelector('#root'));\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}